# Написать программу для работы с данными о людях.
# Программа должна уметь загружать данные из файла, сохранять в файл, вводить
# новые записи и производить поиск по существующим записям.
# Программа сохраняет данные о человеке, а именно: ФИО, дата рождения, дата
# смерти (может отсутствовать) и пол. При этом ФИО вводится 3 полями:
# Имя (обязательно), Фамилия и Отчество могут не вводится.
# Программа должна уметь вычислять возраст человека (количество полных лет) на
# основании даты рождения и даты смерти или сегодняшней даты, если дата смерти
# отсутствует. Дата рождения и дата смерти может вводится в формате:
# 12.10.1980
# 11 10 2000
# 01/02/1995
# 3-9-2007
# Поиск может производится по имени, фамилии и отчеству и выдаёт все варианты,
# которые подходят под строку поиска (это может быть имя, или фамилия, или имя
# и фамилия, или только часть имени и т.д.). К примеру, есть такие записи:
# Евгений Крут Михайлович, 12.10.1980, 11.10.2001, m
# Евгения, 12.10.1980, 12.10.2001, f
# Дмитрий Евгеньевич, 10.03.2000, m
#
# При поиске "евген", выдаются такие данные:
# Евгений Крут Михайлович  20 лет, мужчина. Родился: 12.10.1980. Умер: 11.10.2001.
# Евгения 21 год, женщина. Родилась: 12.10.1980. Умерла: 12.10.2001.
# Дмитрий Евгеньевич 22 года, мужчина. Родился: 10.03.2000.
#
# Программа при старте начинает работать с пустой базой данных. Оператор может
# заполнять её, а может при желании загрузить ранее сохранённые данные из файла
# (желательно Excel).
# Когда есть какие-то записи оператор может сохранить их в файл введя его название.
#
# Желательная структура программы:
# в основной части программы находится вечный цикл с меню, что может выбрать оператор;
# сами данные организованы в виде класса в другом файле, который импортируется в файл
# основной части программы, где создаётся объект соответствующего класса перед заходом
# в вечный цикл;
# все пункты меню основной части программы вызывают те или иные методы у созданного
# объекта данных;
# при желании можно в третьем файле создать отдельный класс Person который будет
# импортироваться в файл с данными. Именно в этом классе будет происходить валидация
# введённых данных.
#
# *Все перечисленные описания являются пожеланиями по реализации дипломного проекта и в
# силу тех или иных причин могут быть изменены по желанию студента. Основные требования:
# программа позволяет ввести новые данные о людях;
# производить поиск по уже введённым данным;
# правильно рассчитывать количество полных лет человека на основе даты рождения и даты
# смерти или текущей даты.
import datetime
import csv
class DB():


    def input_data(self):

        name = input("Введите имя ")
        surname = input("Введите фамилию ")
        otchestvo = input("Введите отчество ")
        date_of_birth = input("дату рождения ")
        date_of_death = input("дату смерти ")
        gender = input("введите пол ")

        return DB(name, date_of_birth, gender, surname, otchestvo, date_of_death)


    def __init__(self, name, date_of_birth, gender, surname="", otchestvo="", date_of_death="000"):
        count =0
        self.name = name
        self.date_of_birth = date_of_birth
        self.gender = gender
        self.surname = surname
        self.otchestvo = otchestvo
        self.date_of_death = date_of_death
        count += 1
        name_of_line = ['name', 'date_of_birth', 'gender', 'surname', 'otchestvo', 'date_of_death']
        line = [self.name, self.date_of_birth, self.gender, self.surname, self.otchestvo, self.date_of_death]

        if count <= 1:
            with open("diploma.csv", "w", encoding="utf-8", newline='') as f1:
                file_writer = csv.writer(f1)
                file_writer.writerow(name_of_line)
                file_writer.writerow(line)
                count += 1

        else:
            with open("diploma.csv", "a", encoding="utf-8", newline='') as f1:
                file_writer = csv.writer(f1)
                file_writer.writerow(line)





    def find(self, other="t"):
        ...


    def get_from_lile(self):
        ...

    def get_intu_file(self):
        ...

    def export_in_json(self):
        ...
